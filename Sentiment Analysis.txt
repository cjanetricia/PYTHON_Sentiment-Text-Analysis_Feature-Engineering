import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('skills.csv', encoding='latin1')
print(df.head())

df['skills'].fillna(0, inplace=True)

df['skills'] = df['skills'].astype(str)

print("Number of missing values in 'skills':", df['skills'].isnull().sum())
print("Number of missing values in 'ratings':", df['rating'].isnull().sum())

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
skills = df['skills'].values
ratings = df['rating'].values
skills_train, skills_test, y_train, y_test = train_test_split(skills, ratings, test_size=0.2, random_state=10)
vectorizer = CountVectorizer()
vectorizer.fit(skills_train)
x_train = vectorizer.transform(skills_train)
x_test = vectorizer.transform(skills_test)

print(len(x_train.toarray()))
print(len(x_test.toarray()))
print(len(x_train.toarray()[0]))
print(x_train.toarray())

print(f"Skills for the Training Set (80 percent): {(len(x_train.toarray()))}")
print(f"Skills for Testing Set: {(len(x_test.toarray()))}")
print(f"Number of Unique Words: {(len(x_train.toarray()[0]))}")

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression()
classifier.fit(x_train, y_train)

predicted = classifier.predict(x_test)
accuracy = np.mean(predicted == y_test)
print("Accuracy:", round(accuracy, 2))

from sklearn import metrics
print(metrics.confusion_matrix(y_test, predicted, labels=[1, 2, 3, 4]))

print(df.groupby('rating').size())

print(metrics.classification_report(y_test, predicted, labels=[1, 2, 3, 4]))

#Bag of Words
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
vectorizer = CountVectorizer()


x = vectorizer.fit_transform(df['skills'])
print(x)

print(pd.DataFrame(x.toarray(), columns=vectorizer.get_feature_names_out()))

feature_rank = list(zip(vectorizer.get_feature_names_out(), [x[0] for x in x.sum(axis=0).T.tolist()]))

feature_rank = np.array(sorted(feature_rank, key=lambda x: x[1], reverse=True))

top6 = feature_rank[:6]

n = 7
plt.figure(figsize=(5,5))
plt.barh(-np.arange(n), feature_rank[:n, 1].astype(float), height=.6, align='center')
plt.yticks(ticks=-np.arange(n), labels=feature_rank[:n, 0], fontsize=12)
plt.xlabel('Most Frequent skills', fontsize=8)

plt.show()

